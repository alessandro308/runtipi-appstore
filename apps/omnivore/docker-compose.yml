version: '3'
services:
  postgres:
    image: "ankane/pgvector:v0.5.1"
    user: postgres
    healthcheck:
      test: "exit 0"
      interval: 2s
      timeout: 12s
      retries: 3
    volumes:
      - ${APP_DATA_DIR}/data/postgres:/var/lib/postgresql/data
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=omnivore
      - POSTGRES_DB=omnivore
    networks:
      - tipi_main_network

  migrate:
    image: "ghcr.io/omnivore-app/sh-migrate:latest"
    command: '/bin/sh ./packages/db/setup.sh'
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=omnivore
      - POSTGRES_DB=omnivore
      - POSTGRES_HOST=postgres
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - tipi_main_network

  api:
    image: "ghcr.io/omnivore-app/sh-backend:latest"
    ports:
      - "4000:8080"
    healthcheck:
      test: ["CMD-SHELL", "nc -z 0.0.0.0 8080 || exit 1"]
      interval: 15s
      timeout: 90s
      retries: 6
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=omnivore
      - POSTGRES_DB=omnivore
      - POSTGRES_HOST=postgres
      - JWT_SECRET=${JWT_SECRET}
      - ADMIN_EMAIL=${ADMIN_EMAIL}
      - ADMIN_PASSWORD=${ADMIN_PASSWORD}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=miniominio
      - AWS_S3_ENDPOINT_URL=http://minio:1010
      - AWS_S3_BUCKET_NAME=omnivore
    depends_on:
      migrate:
        condition: service_completed_successfully
    networks:
      - tipi_main_network

  queue-processor:
    image: "ghcr.io/omnivore-app/sh-queue-processor:latest"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=omnivore
      - POSTGRES_DB=omnivore
      - POSTGRES_HOST=postgres
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      api:
        condition: service_started
    networks:
      - tipi_main_network

  web:
    image: "ghcr.io/omnivore-app/sh-web:latest"
    ports:
      - "${APP_PORT}:8080"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=omnivore
      - POSTGRES_DB=omnivore
      - POSTGRES_HOST=postgres
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      api:
        condition: service_healthy
    networks:
      - tipi_main_network
    labels:
      traefik.enable: true
      traefik.http.middlewares.omnivore-web-redirect.redirectscheme.scheme: https
      traefik.http.services.omnivore.loadbalancer.server.port: 8080
      traefik.http.routers.omnivore-insecure.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.omnivore-insecure.entrypoints: web
      traefik.http.routers.omnivore-insecure.service: omnivore
      traefik.http.routers.omnivore-insecure.middlewares: omnivore-web-redirect
      traefik.http.routers.omnivore.rule: Host(`${APP_DOMAIN}`)
      traefik.http.routers.omnivore.entrypoints: websecure
      traefik.http.routers.omnivore.service: omnivore
      traefik.http.routers.omnivore.tls.certresolver: myresolver
      traefik.http.routers.omnivore-local-insecure.rule: Host(`omnivore.${LOCAL_DOMAIN}`)
      traefik.http.routers.omnivore-local-insecure.entrypoints: web
      traefik.http.routers.omnivore-local-insecure.service: omnivore
      traefik.http.routers.omnivore-local-insecure.middlewares: omnivore-web-redirect
      traefik.http.routers.omnivore-local.rule: Host(`omnivore.${LOCAL_DOMAIN}`)
      traefik.http.routers.omnivore-local.entrypoints: websecure
      traefik.http.routers.omnivore-local.service: omnivore
      traefik.http.routers.omnivore-local.tls: true
      runtipi.managed: true

  image-proxy:
    image: "ghcr.io/omnivore-app/sh-image-proxy:latest"
    ports:
      - "7070:8080"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=omnivore
      - POSTGRES_DB=omnivore
      - POSTGRES_HOST=postgres
      - JWT_SECRET=${JWT_SECRET}
    networks:
      - tipi_main_network

  content-fetch:
    image: "ghcr.io/omnivore-app/sh-content-fetch:latest"
    ports:
      - "9090:8080"
    environment:
      - USE_FIREFOX=true
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=omnivore
      - POSTGRES_DB=omnivore
      - POSTGRES_HOST=postgres
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
      api:
        condition: service_healthy
    networks:
      - tipi_main_network

  redis:
    image: "redis:7.2.4"
    expose:
      - 6379
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
    volumes:
      - ${APP_DATA_DIR}/data/redis:/data
    networks:
      - tipi_main_network

  minio:
    image: minio/minio
    expose:
      - 1010
    healthcheck:
      test: [ "CMD", "mc", "ready", "local" ]
      interval: 5s
      timeout: 1s
    environment:
      - "MINIO_ACCESS_KEY=minio"
      - "MINIO_SECRET_KEY=miniominio"
      - "AWS_S3_ENDPOINT_URL=http://minio:1010"
    command: server /data
    volumes:
      - ${APP_DATA_DIR}/data/minio:/data
    networks:
      - tipi_main_network

  createbuckets:
    image: minio/mc
    environment:
      - MINIO_ACCESS_KEY=minio
      - MINIO_SECRET_KEY=miniominio
      - BUCKET_NAME=omnivore
      - ENDPOINT=http://minio:9000
      - AWS_S3_ENDPOINT_URL=http://minio:9000
    depends_on:
      - minio
    entrypoint: >
      /bin/bash -c "
      sleep 5;
      until (/usr/bin/mc config host add myminio http://minio:9000 minio miniominio) do echo '...waiting...' && sleep 1; done;
      /usr/bin/mc mb myminio/omnivore;
      /usr/bin/mc anonymous set public myminio/omnivore;
      exit 0;
      "
    networks:
      - tipi_main_network

  mail-watch-server:
    image: "ghcr.io/omnivore-app/sh-local-mail-watcher:latest"
    ports:
      - "4398:8080"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_USER=omnivore
      - POSTGRES_DB=omnivore
      - POSTGRES_HOST=postgres
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - tipi_main_network

networks:
  tipi_main_network:
    external: true 